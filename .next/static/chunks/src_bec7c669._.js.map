{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\r\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Select = SelectPrimitive.Root\r\n\r\nconst SelectGroup = SelectPrimitive.Group\r\n\r\nconst SelectValue = SelectPrimitive.Value\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <SelectPrimitive.Icon asChild>\r\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\r\n    </SelectPrimitive.Icon>\r\n  </SelectPrimitive.Trigger>\r\n))\r\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\r\n\r\nconst SelectScrollUpButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollUpButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronUp className=\"h-4 w-4\" />\r\n  </SelectPrimitive.ScrollUpButton>\r\n))\r\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\r\n\r\nconst SelectScrollDownButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollDownButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronDown className=\"h-4 w-4\" />\r\n  </SelectPrimitive.ScrollDownButton>\r\n))\r\nSelectScrollDownButton.displayName =\r\n  SelectPrimitive.ScrollDownButton.displayName\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\r\n>(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectScrollUpButton />\r\n      <SelectPrimitive.Viewport\r\n        className={cn(\r\n          \"p-1\",\r\n          position === \"popper\" &&\r\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\r\n        )}\r\n      >\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n      <SelectScrollDownButton />\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n))\r\nSelectContent.displayName = SelectPrimitive.Content.displayName\r\n\r\nconst SelectLabel = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectLabel.displayName = SelectPrimitive.Label.displayName\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <Check className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n))\r\nSelectItem.displayName = SelectPrimitive.Item.displayName\r\n\r\nconst SelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\r\n\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectLabel,\r\n  SelectItem,\r\n  SelectSeparator,\r\n  SelectScrollUpButton,\r\n  SelectScrollDownButton,\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableFooter.displayName = \"TableFooter\"\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<HTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCaption.displayName = \"TableCaption\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/lib/shared-data.ts"],"sourcesContent":["export interface TeamLeader {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  salaryType: 'Commission-based' | 'Fixed';\n  commissionRate?: number;\n  fixedSalary?: number;\n  week1Salary: number;\n  week2Salary: number;\n  totalSalary: number;\n  paymentStatus: 'Paid' | 'Not Paid';\n  assignedModels: string[];\n  status: 'Active' | 'Inactive';\n}\n\nexport interface Model {\n  id: string;\n  modelName: string;\n  clientAgencyName: string;\n  managerName: string;\n  teamLeader: string;\n  earningsType: 'Type 1' | 'Type 2';\n  status: 'Active' | 'Inactive';\n  paymentStatus: 'Paid' | 'Not Paid';\n  cutLogic: {\n    type: 'Type 1' | 'Type 2';\n    percentage1: number;\n    threshold: number;\n    fixedAmount: number;\n    percentage2: number;\n  };\n  commissionRules: {\n    baseCommission: number;\n    bonusEnabled: boolean;\n    bonusThreshold: number;\n    bonusCommission: number;\n  };\n  notes: string;\n}\n\nexport const teamLeaders: TeamLeader[] = [\n  {\n    id: '1',\n    name: 'Alex Johnson',\n    email: 'alex.johnson@agency.com',\n    phone: '+1 (555) 123-4567',\n    salaryType: 'Commission-based',\n    commissionRate: 15,\n    week1Salary: 1200,\n    week2Salary: 1350,\n    totalSalary: 2550,\n    paymentStatus: 'Paid',\n    assignedModels: ['Anastasia', 'Sophie'],\n    status: 'Active'\n  },\n  {\n    id: '2',\n    name: 'Samantha Ray',\n    email: 'samantha.ray@agency.com',\n    phone: '+1 (555) 234-5678',\n    salaryType: 'Fixed',\n    fixedSalary: 3000,\n    week1Salary: 1500,\n    week2Salary: 1500,\n    totalSalary: 3000,\n    paymentStatus: 'Not Paid',\n    assignedModels: ['Isabella', 'Valentina'],\n    status: 'Active'\n  },\n  {\n    id: '3',\n    name: 'Mike Williams',\n    email: 'mike.williams@agency.com',\n    phone: '+1 (555) 345-6789',\n    salaryType: 'Commission-based',\n    commissionRate: 12,\n    week1Salary: 980,\n    week2Salary: 1100,\n    totalSalary: 2080,\n    paymentStatus: 'Paid',\n    assignedModels: ['Elena', 'Maria'],\n    status: 'Active'\n  },\n  {\n    id: '4',\n    name: 'Sarah Chen',\n    email: 'sarah.chen@agency.com',\n    phone: '+1 (555) 456-7890',\n    salaryType: 'Fixed',\n    fixedSalary: 2800,\n    week1Salary: 1400,\n    week2Salary: 1400,\n    totalSalary: 2800,\n    paymentStatus: 'Not Paid',\n    assignedModels: ['Sophia', 'Emma'],\n    status: 'Inactive'\n  }\n];\n\nexport const models: Model[] = [\n  {\n    id: '1',\n    modelName: 'Anastasia',\n    clientAgencyName: 'Celestial Models',\n    managerName: 'Admin',\n    teamLeader: 'Alex Johnson',\n    earningsType: 'Type 1',\n    status: 'Active',\n    paymentStatus: 'Paid',\n    cutLogic: {\n      type: 'Type 1',\n      percentage1: 20,\n      threshold: 5000,\n      fixedAmount: 1000,\n      percentage2: 0,\n    },\n    commissionRules: {\n      baseCommission: 3,\n      bonusEnabled: true,\n      bonusThreshold: 1000,\n      bonusCommission: 5,\n    },\n    notes: 'Top performing model.',\n  },\n  {\n    id: '2',\n    modelName: 'Isabella',\n    clientAgencyName: 'Starlight Agency',\n    managerName: 'Admin',\n    teamLeader: 'Samantha Ray',\n    earningsType: 'Type 2',\n    status: 'Active',\n    paymentStatus: 'Not Paid',\n    cutLogic: {\n      type: 'Type 2',\n      percentage1: 0,\n      threshold: 0,\n      fixedAmount: 0,\n      percentage2: 25,\n    },\n    commissionRules: {\n      baseCommission: 4,\n      bonusEnabled: false,\n      bonusThreshold: 0,\n      bonusCommission: 0,\n    },\n    notes: '',\n  },\n  {\n    id: '3',\n    modelName: 'Sophie',\n    clientAgencyName: 'Celestial Models',\n    managerName: 'Admin',\n    teamLeader: 'Alex Johnson',\n    earningsType: 'Type 1',\n    status: 'Inactive',\n    paymentStatus: 'Not Paid',\n    cutLogic: {\n      type: 'Type 1',\n      percentage1: 15,\n      threshold: 4000,\n      fixedAmount: 800,\n      percentage2: 0,\n    },\n    commissionRules: {\n      baseCommission: 3,\n      bonusEnabled: false,\n      bonusThreshold: 0,\n      bonusCommission: 0,\n    },\n    notes: 'On break.',\n  },\n  {\n    id: '4',\n    modelName: 'Valentina',\n    clientAgencyName: 'Galaxy Management',\n    managerName: 'Admin',\n    teamLeader: 'Samantha Ray',\n    earningsType: 'Type 2',\n    status: 'Active',\n    paymentStatus: 'Paid',\n    cutLogic: {\n      type: 'Type 2',\n      percentage1: 0,\n      threshold: 0,\n      fixedAmount: 0,\n      percentage2: 30,\n    },\n     commissionRules: {\n      baseCommission: 3.5,\n      bonusEnabled: true,\n      bonusThreshold: 1200,\n      bonusCommission: 6,\n    },\n    notes: '',\n  },\n  {\n    id: '5',\n    modelName: 'Elena',\n    clientAgencyName: 'Starlight Agency',\n    managerName: 'Admin',\n    teamLeader: 'Mike Williams',\n    earningsType: 'Type 1',\n    status: 'Active',\n    paymentStatus: 'Not Paid',\n    cutLogic: {\n      type: 'Type 1',\n      percentage1: 18,\n      threshold: 4500,\n      fixedAmount: 900,\n      percentage2: 0,\n    },\n    commissionRules: {\n      baseCommission: 3.5,\n      bonusEnabled: true,\n      bonusThreshold: 800,\n      bonusCommission: 4.5,\n    },\n    notes: 'New model, performing well.',\n  },\n  {\n    id: '6',\n    modelName: 'Maria',\n    clientAgencyName: 'Galaxy Management',\n    managerName: 'Admin',\n    teamLeader: 'Mike Williams',\n    earningsType: 'Type 2',\n    status: 'Active',\n    paymentStatus: 'Paid',\n    cutLogic: {\n      type: 'Type 2',\n      percentage1: 0,\n      threshold: 0,\n      fixedAmount: 0,\n      percentage2: 22,\n    },\n    commissionRules: {\n      baseCommission: 3,\n      bonusEnabled: false,\n      bonusThreshold: 0,\n      bonusCommission: 0,\n    },\n    notes: '',\n  },\n  {\n    id: '7',\n    modelName: 'Sophia',\n    clientAgencyName: 'Celestial Models',\n    managerName: 'Admin',\n    teamLeader: 'Sarah Chen',\n    earningsType: 'Type 1',\n    status: 'Inactive',\n    paymentStatus: 'Not Paid',\n    cutLogic: {\n      type: 'Type 1',\n      percentage1: 16,\n      threshold: 4200,\n      fixedAmount: 850,\n      percentage2: 0,\n    },\n    commissionRules: {\n      baseCommission: 3.2,\n      bonusEnabled: true,\n      bonusThreshold: 900,\n      bonusCommission: 4.8,\n    },\n    notes: 'Temporarily inactive.',\n  },\n  {\n    id: '8',\n    modelName: 'Emma',\n    clientAgencyName: 'Starlight Agency',\n    managerName: 'Admin',\n    teamLeader: 'Sarah Chen',\n    earningsType: 'Type 2',\n    status: 'Inactive',\n    paymentStatus: 'Paid',\n    cutLogic: {\n      type: 'Type 2',\n      percentage1: 0,\n      threshold: 0,\n      fixedAmount: 0,\n      percentage2: 28,\n    },\n    commissionRules: {\n      baseCommission: 3.8,\n      bonusEnabled: false,\n      bonusThreshold: 0,\n      bonusCommission: 0,\n    },\n    notes: 'On extended break.',\n  }\n];\n\n// Helper functions\nexport const getActiveTeamLeaders = () => teamLeaders.filter(tl => tl.status === 'Active');\nexport const getActiveModels = () => models.filter(model => model.status === 'Active');\nexport const getActiveChatters = () => chatters.filter(chatter => chatter.status === 'active');\nexport const getModelNames = () => models.map(model => model.modelName);\nexport const getTeamLeaderNames = () => teamLeaders.map(tl => tl.name);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 750, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/lib/insights-calculations.ts"],"sourcesContent":["// Insights Calculations Utility\n// This file contains all the business logic for insights and statistics calculations\n\nimport { models, teamLeaders } from './shared-data';\nimport { ModelRevenueCalculator } from './salary-calculations';\n\nexport interface ModelInsightData {\n  id: string;\n  modelName: string;\n  managerName: string;\n  period: string;\n  netSales: number;\n  invoiceValue: number;\n  invoiceStatus: 'Paid' | 'Not Paid';\n  revenue: number;\n  realRevenue: number;\n  cost: number;\n  profit: number;\n  realProfit: number;\n  chatterCost: number;\n  managerCost: number;\n  assistantCost: number;\n}\n\nexport interface PeriodFinancialData {\n  id: string;\n  period: string;\n  revenue: number;\n  realRevenue: number;\n  cost: number;\n  realCost: number;\n  profit: number;\n  realProfit: number;\n  modelBreakdown: ModelInsightData[];\n}\n\nexport interface ChatterCostData {\n  id: string;\n  name: string;\n  hours: number;\n  hourlyCost: number;\n  commission: number;\n  totalCost: number;\n  modelId: string;\n  modelName: string;\n}\n\nexport class InsightsCalculator {\n  // Calculate invoice value based on model rules\n  static calculateInvoiceValue(netSales: number, modelId: string): number {\n    const model = models.find(m => m.id === modelId);\n    if (!model) return 0;\n\n    if (model.earningsType === 'Type 1') {\n      return netSales >= model.cutLogic.threshold \n        ? netSales * (model.cutLogic.percentage1 / 100)\n        : model.cutLogic.fixedAmount;\n    } else {\n      return netSales * (model.cutLogic.percentage2 / 100);\n    }\n  }\n\n  // Calculate real revenue based on invoice status\n  static calculateRealRevenue(invoiceValue: number, status: 'Paid' | 'Not Paid'): number {\n    return status === 'Paid' ? invoiceValue : 0;\n  }\n\n  // Calculate profit\n  static calculateProfit(revenue: number, cost: number): number {\n    return revenue - cost;\n  }\n\n  // Calculate real profit\n  static calculateRealProfit(realRevenue: number, cost: number): number {\n    return realRevenue - cost;\n  }\n\n  // Get model manager name\n  static getModelManager(modelId: string): string {\n    const model = models.find(m => m.id === modelId);\n    if (!model) return 'Unknown';\n    \n    const teamLeader = teamLeaders.find(tl => tl.name === model.teamLeader);\n    return teamLeader ? teamLeader.name : model.teamLeader;\n  }\n\n  // Calculate cost attribution for a model\n  static calculateModelCosts(\n    modelId: string,\n    period: string,\n    chatterCosts: ChatterCostData[]\n  ): { chatterCost: number; managerCost: number; assistantCost: number; totalCost: number } {\n    // Filter costs for this model and period\n    const modelChatterCosts = chatterCosts.filter(cost => cost.modelId === modelId);\n    \n    const chatterCost = modelChatterCosts.reduce((sum, cost) => sum + cost.totalCost, 0);\n    \n    // Get manager cost (simplified - in real app this would be more complex)\n    const model = models.find(m => m.id === modelId);\n    const managerCost = model ? 400 : 0; // Mock value\n    \n    // Get assistant cost (simplified)\n    const assistantCost = 250; // Mock value\n    \n    const totalCost = chatterCost + managerCost + assistantCost;\n    \n    return {\n      chatterCost,\n      managerCost,\n      assistantCost,\n      totalCost\n    };\n  }\n\n  // Generate period financial data\n  static generatePeriodFinancialData(\n    period: string,\n    modelData: ModelInsightData[]\n  ): PeriodFinancialData {\n    const revenue = modelData.reduce((sum, model) => sum + model.revenue, 0);\n    const realRevenue = modelData.reduce((sum, model) => sum + model.realRevenue, 0);\n    const cost = modelData.reduce((sum, model) => sum + model.cost, 0);\n    const profit = modelData.reduce((sum, model) => sum + model.profit, 0);\n    const realProfit = modelData.reduce((sum, model) => sum + model.realProfit, 0);\n\n    return {\n      id: period,\n      period,\n      revenue,\n      realRevenue,\n      cost,\n      realCost: cost, // Simplified - real cost might be different\n      profit,\n      realProfit,\n      modelBreakdown: modelData\n    };\n  }\n\n  // Update model insight data when net sales changes\n  static updateModelInsightData(\n    modelId: string,\n    period: string,\n    netSales: number,\n    invoiceStatus: 'Paid' | 'Not Paid',\n    chatterCosts: ChatterCostData[]\n  ): ModelInsightData {\n    const model = models.find(m => m.id === modelId);\n    if (!model) {\n      throw new Error(`Model with ID ${modelId} not found`);\n    }\n\n    const invoiceValue = this.calculateInvoiceValue(netSales, modelId);\n    const revenue = invoiceValue;\n    const realRevenue = this.calculateRealRevenue(invoiceValue, invoiceStatus);\n    \n    const costs = this.calculateModelCosts(modelId, period, chatterCosts);\n    const profit = this.calculateProfit(revenue, costs.totalCost);\n    const realProfit = this.calculateRealProfit(realRevenue, costs.totalCost);\n\n    return {\n      id: modelId,\n      modelName: model.modelName,\n      managerName: this.getModelManager(modelId),\n      period,\n      netSales,\n      invoiceValue,\n      invoiceStatus,\n      revenue,\n      realRevenue,\n      cost: costs.totalCost,\n      profit,\n      realProfit,\n      chatterCost: costs.chatterCost,\n      managerCost: costs.managerCost,\n      assistantCost: costs.assistantCost\n    };\n  }\n\n  // Get Y-axis scale based on period type\n  static getYAxisScale(period: string): number {\n    if (period.includes('Week')) return 1000; // 1K per grid line for weeks\n    if (period.includes('1') || period.includes('2')) return 2000; // 2K per grid line for half-months\n    return 4000; // 4K per grid line for full months\n  }\n\n  // Validate period format\n  static isValidPeriod(period: string): boolean {\n    const validPeriods = [\n      'July', 'July 1', 'July 2', 'July 1 - Week 1', 'July 1 - Week 2', 'July 2 - Week 1', 'July 2 - Week 2',\n      'August', 'August 1', 'August 2', 'August 1 - Week 1', 'August 1 - Week 2', 'August 2 - Week 1', 'August 2 - Week 2',\n      'September', 'September 1', 'September 2', 'September 1 - Week 1', 'September 1 - Week 2', 'September 2 - Week 1', 'September 2 - Week 2'\n    ];\n    return validPeriods.includes(period);\n  }\n\n  // Get all available periods\n  static getAvailablePeriods(): string[] {\n    const months = [\n      'January','February','March','April','May','June','July','August','September','October','November','December'\n    ];\n    const periods: string[] = [];\n    for (const m of months) {\n      periods.push(m);\n      periods.push(`${m} 1`);\n      periods.push(`${m} 2`);\n      periods.push(`${m} 1 - Week 1`);\n      periods.push(`${m} 1 - Week 2`);\n      periods.push(`${m} 2 - Week 1`);\n      periods.push(`${m} 2 - Week 2`);\n    }\n    return periods;\n  }\n\n  // Calculate performance rating based on profit\n  static calculatePerformanceRating(profit: number, averageProfit: number): 'High' | 'Medium' | 'Low' {\n    if (profit >= averageProfit * 1.2) return 'High';\n    if (profit >= averageProfit * 0.8) return 'Medium';\n    return 'Low';\n  }\n\n  // Get mock chatter costs for demonstration\n  static getMockChatterCosts(modelId: string): ChatterCostData[] {\n    return [\n      {\n        id: '1',\n        name: 'John Doe',\n        hours: 32,\n        hourlyCost: 480,\n        commission: 120,\n        totalCost: 600,\n        modelId,\n        modelName: models.find(m => m.id === modelId)?.modelName || 'Unknown'\n      },\n      {\n        id: '2',\n        name: 'Jane Smith',\n        hours: 28,\n        hourlyCost: 420,\n        commission: 105,\n        totalCost: 525,\n        modelId,\n        modelName: models.find(m => m.id === modelId)?.modelName || 'Unknown'\n      }\n    ];\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/components/ui/financial-histogram.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\ninterface FinancialData {\r\n  name: string;\r\n  revenue: number;\r\n  cost: number;\r\n  profit: number;\r\n  realRevenue: number;\r\n  realProfit: number;\r\n}\r\n\r\ninterface FinancialHistogramProps {\r\n  data: FinancialData[];\r\n  title?: string;\r\n  subtitle?: string;\r\n  loading?: boolean;\r\n  height?: number;\r\n  period?: string; // For dynamic scaling\r\n}\r\n\r\n// Helper function to determine Y-axis scaling based on period\r\nconst getYAxisScaling = (period: string, data: FinancialData[]) => {\r\n  const maxValue = Math.max(\r\n    ...data.flatMap(d => [d.revenue, d.cost, d.profit, d.realRevenue, d.realProfit])\r\n  );\r\n  \r\n  let gridStep = 1000; // Default 1K\r\n  if (period.includes('Week')) {\r\n    gridStep = 1000; // 1K per grid line for weekly\r\n  } else if (period.includes('July 1') || period.includes('July 2') || \r\n             period.includes('August 1') || period.includes('August 2') ||\r\n             period.includes('January 1') || period.includes('January 2') ||\r\n             period.includes('February 1') || period.includes('February 2') ||\r\n             period.includes('March 1') || period.includes('March 2') ||\r\n             period.includes('April 1') || period.includes('April 2') ||\r\n             period.includes('May 1') || period.includes('May 2') ||\r\n             period.includes('June 1') || period.includes('June 2') ||\r\n             period.includes('September 1') || period.includes('September 2') ||\r\n             period.includes('October 1') || period.includes('October 2') ||\r\n             period.includes('November 1') || period.includes('November 2') ||\r\n             period.includes('December 1') || period.includes('December 2')) {\r\n    gridStep = 2000; // 2K per grid line for half-month\r\n  } else if (period === 'July' || period === 'August' || period === 'January' || \r\n             period === 'February' || period === 'March' || period === 'April' ||\r\n             period === 'May' || period === 'June' || period === 'September' ||\r\n             period === 'October' || period === 'November' || period === 'December') {\r\n    gridStep = 4000; // 4K per grid line for full month\r\n  }\r\n  \r\n  return Math.ceil(maxValue / gridStep) * gridStep;\r\n};\r\n\r\nexport function FinancialHistogram({ \r\n  data, \r\n  title = \"Financial Overview\", \r\n  subtitle,\r\n  loading = false,\r\n  height = 400,\r\n  period = \"\"\r\n}: FinancialHistogramProps) {\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center py-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n          <span>Loading financial data...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className=\"flex items-center justify-center py-8\">\r\n        <div className=\"text-muted-foreground\">\r\n          No financial data available for the selected period\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Get Y-axis scaling based on period\r\n  const yAxisMax = getYAxisScaling(period, data);\r\n\r\n  // Transform data for Recharts with proper gaps\r\n  const chartData = data.map((item, index) => ({\r\n    name: item.name,\r\n    Revenue: item.revenue,\r\n    Cost: item.cost,\r\n    Profit: item.profit,\r\n    // Add spacer for large gap between Profit and Real Revenue\r\n    spacer1: 0,\r\n    spacer2: 0,\r\n    'Real Revenue': item.realRevenue,\r\n    'Real Profit': item.realProfit,\r\n  }));\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <BarChart\r\n          data={chartData}\r\n          margin={{\r\n            top: 20,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"name\" \r\n            tick={{ fontSize: 12 }}\r\n            angle={-45}\r\n            textAnchor=\"end\"\r\n            height={60}\r\n          />\r\n          <YAxis \r\n            tick={{ fontSize: 12 }}\r\n            tickFormatter={(value) => `$${value.toLocaleString()}`}\r\n            domain={[0, yAxisMax]}\r\n            tickCount={6}\r\n          />\r\n          <Tooltip \r\n            formatter={(value: number, name: string) => {\r\n              if (name === 'spacer1' || name === 'spacer2') return null;\r\n              return [`$${value.toLocaleString()}`, name];\r\n            }}\r\n            labelFormatter={(label) => `Period: ${label}`}\r\n            contentStyle={{\r\n              backgroundColor: 'white',\r\n              border: '1px solid #ccc',\r\n              borderRadius: '6px',\r\n              boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Bar \r\n            dataKey=\"Revenue\" \r\n            fill=\"#16a34a\" \r\n            name=\"Revenue\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Cost\" \r\n            fill=\"#dc2626\" \r\n            name=\"Cost\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Profit\" \r\n            fill=\"#2563eb\" \r\n            name=\"Profit\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          {/* Spacer bars for gaps - invisible */}\r\n          <Bar \r\n            dataKey=\"spacer1\" \r\n            fill=\"transparent\" \r\n            name=\"\"\r\n            radius={[0, 0, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"spacer2\" \r\n            fill=\"transparent\" \r\n            name=\"\"\r\n            radius={[0, 0, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Real Revenue\" \r\n            fill=\"#22c55e\" \r\n            name=\"Real Revenue\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Real Profit\" \r\n            fill=\"#3b82f6\" \r\n            name=\"Real Profit\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// Single period histogram for model insights\r\ninterface SinglePeriodData {\r\n  revenue: number;\r\n  cost: number;\r\n  profit: number;\r\n  realRevenue: number;\r\n  realProfit: number;\r\n}\r\n\r\ninterface SinglePeriodHistogramProps {\r\n  data: SinglePeriodData;\r\n  period: string;\r\n  loading?: boolean;\r\n  height?: number;\r\n}\r\n\r\nexport function SinglePeriodHistogram({ \r\n  data, \r\n  period,\r\n  loading = false,\r\n  height = 400 \r\n}: SinglePeriodHistogramProps) {\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center py-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\r\n          <span>Loading financial data...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!data) {\r\n    return (\r\n      <div className=\"flex items-center justify-center py-8\">\r\n        <div className=\"text-muted-foreground\">\r\n          No financial data available for the selected period\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Get Y-axis scaling based on period\r\n  const yAxisMax = getYAxisScaling(period, [{\r\n    name: period,\r\n    revenue: data.revenue,\r\n    cost: data.cost,\r\n    profit: data.profit,\r\n    realRevenue: data.realRevenue,\r\n    realProfit: data.realProfit,\r\n  }]);\r\n\r\n  // Transform data for Recharts with proper gaps\r\n  const chartData = [{\r\n    name: period,\r\n    Revenue: data.revenue,\r\n    Cost: data.cost,\r\n    Profit: data.profit,\r\n    // Add spacer for large gap between Profit and Real Revenue\r\n    spacer1: 0,\r\n    spacer2: 0,\r\n    'Real Revenue': data.realRevenue,\r\n    'Real Profit': data.realProfit,\r\n  }];\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <ResponsiveContainer width=\"100%\" height={height}>\r\n        <BarChart\r\n          data={chartData}\r\n          margin={{\r\n            top: 20,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis \r\n            dataKey=\"name\" \r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            tick={{ fontSize: 12 }}\r\n            tickFormatter={(value) => `$${value.toLocaleString()}`}\r\n            domain={[0, yAxisMax]}\r\n            tickCount={6}\r\n          />\r\n          <Tooltip \r\n            formatter={(value: number, name: string) => {\r\n              if (name === 'spacer1' || name === 'spacer2') return null;\r\n              return [`$${value.toLocaleString()}`, name];\r\n            }}\r\n            labelFormatter={() => `Period: ${period}`}\r\n            contentStyle={{\r\n              backgroundColor: 'white',\r\n              border: '1px solid #ccc',\r\n              borderRadius: '6px',\r\n              boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n            }}\r\n          />\r\n          <Legend />\r\n          <Bar \r\n            dataKey=\"Revenue\" \r\n            fill=\"#16a34a\" \r\n            name=\"Revenue\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Cost\" \r\n            fill=\"#dc2626\" \r\n            name=\"Cost\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Profit\" \r\n            fill=\"#2563eb\" \r\n            name=\"Profit\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          {/* Spacer bars for gaps - invisible */}\r\n          <Bar \r\n            dataKey=\"spacer1\" \r\n            fill=\"transparent\" \r\n            name=\"\"\r\n            radius={[0, 0, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"spacer2\" \r\n            fill=\"transparent\" \r\n            name=\"\"\r\n            radius={[0, 0, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Real Revenue\" \r\n            fill=\"#22c55e\" \r\n            name=\"Real Revenue\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar \r\n            dataKey=\"Real Profit\" \r\n            fill=\"#3b82f6\" \r\n            name=\"Real Profit\"\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1533, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/as941/Downloads/final_Finance_goat%202/Finance_goat/frontend/src/app/dashboard/models/%5BmodelId%5D/insights/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'next/navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { NumberInput } from '@/components/ui/number-input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, TrendingUp, TrendingDown, DollarSign, Users, Activity } from 'lucide-react';\nimport Link from 'next/link';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiService } from '@/lib/api';\nimport { InsightsCalculator } from '@/lib/insights-calculations';\nimport { SinglePeriodHistogram } from '@/components/ui/financial-histogram';\n\ninterface ModelInsightsData {\n  revenue: number;\n  real_revenue: number;\n  cost: number;\n  profit: number;\n  real_profit: number;\n  metadata?: {\n    scope_type: string;\n    month?: string;\n    period?: string;\n    periods_included?: string[];\n  };\n}\n\ninterface ModelData {\n  model_id: string;\n  model_name: string;\n  manager_name?: string;\n  team_leader?: string;\n  client_agency_name?: string;\n  earnings_type?: string;\n  cut_logic?: any;\n  referenced_models?: string[];\n}\n\ninterface CostBreakdown {\n  chatter_cost: number;\n  tl_cost: number;\n  manager_cost: number;\n  assistant_cost: number;\n  total_cost: number;\n}\n\ninterface WeeklySummaryRow {\n  label: string;\n  period: string;\n  week: number;\n  revenue: number;\n  real_revenue: number;\n  cost: number;\n  profit: number;\n  real_profit: number;\n}\n\nexport default function ModelInsightsPage() {\n  const params = useParams();\n  const modelId = params.modelId as string;\n  const { toast } = useToast();\n  \n  const [selectedPeriod, setSelectedPeriod] = useState('January 1');\n  const [modelData, setModelData] = useState<ModelData | null>(null);\n  const [insightsData, setInsightsData] = useState<ModelInsightsData | null>(null);\n  const [costBreakdown, setCostBreakdown] = useState<CostBreakdown | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [netAmount, setNetAmount] = useState(0);\n  const [invoiceValue, setInvoiceValue] = useState(0);\n  const [invoiceStatus, setInvoiceStatus] = useState<'Paid' | 'Unpaid'>('Unpaid');\n  const [year] = useState<number>(new Date().getFullYear());\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [refNetSales, setRefNetSales] = useState<number[]>([]);\n  const [allModels, setAllModels] = useState<any[]>([]);\n  const [weeklySummary, setWeeklySummary] = useState<WeeklySummaryRow[]>([]);\n  const [loadingSummary, setLoadingSummary] = useState(false);\n  const [workReports, setWorkReports] = useState<any[]>([]);\n\n  const parseWeekPeriod = (label: string): { period: string; week?: number } => {\n    if (label.includes(' - Week ')) {\n      const [p, wk] = label.split(' - Week ');\n      const weekNum = parseInt(wk, 10);\n      return { period: p, week: isNaN(weekNum) ? undefined : weekNum };\n    }\n    return { period: label };\n  };\n\n  // Available periods for selection (reuse same as Insights page)\n  const availablePeriods = InsightsCalculator.getAvailablePeriods();\n\n  useEffect(() => {\n    loadModelData();\n    loadInsightsData();\n    loadWeeklySummary();\n    // loadWorkReports(); // Commented out - manual input preferred for insights\n  }, [modelId, selectedPeriod]);\n\n  const loadModelData = async () => {\n    try {\n      const response = await apiService.getModelDetails(modelId);\n      if (response.status === 'Success' && response.data) {\n        const d: any = response.data;\n        // Normalize camelCase/snake_case fields from backend\n        setModelData({\n          model_id: d.model_id || d.modelId,\n          model_name: d.model_name || d.modelName,\n          manager_name: d.manager_name || d.managerName,\n          team_leader: d.team_leader || d.teamLeader,\n          client_agency_name: d.client_agency_name || d.clientAgencyName,\n          earnings_type: d.earnings_type || d.earningsType,\n          cut_logic: d.cut_logic || d.cutLogic,\n          referenced_models: d.referenced_models || d.referencedModels || [],\n        });\n      }\n      // Load all models for reference children ID mapping\n      try {\n        const list = await apiService.getAllModels({});\n        if (list.status === 'Success' && Array.isArray(list.data)) {\n          setAllModels(list.data as any[]);\n        }\n      } catch {}\n    } catch (error) {\n      console.error('Error loading model data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load model data. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const loadInsightsData = async () => {\n    try {\n      setLoading(true);\n      \n      // Load model-specific insights\n      const { period, week } = parseWeekPeriod(selectedPeriod);\n      const insightsResponse = await apiService.getModelInsights(modelId, period, year, week);\n      if (insightsResponse.status === 'Success' && insightsResponse.data) {\n        setInsightsData(insightsResponse.data);\n      }\n\n      // Auto-populate Net Amount and Invoice Value based on period scope\n      await populatePeriodData();\n\n      // Load real cost breakdown from backend\n      const costRes = await apiService.getModelCostBreakdown(modelId, period, year, week);\n      if (costRes.status === 'Success' && costRes.data) {\n        setCostBreakdown({\n          chatter_cost: costRes.data.chatter_cost,\n          tl_cost: costRes.data.tl_cost,\n          manager_cost: costRes.data.manager_cost,\n          assistant_cost: costRes.data.assistant_cost,\n          total_cost: costRes.data.total_cost,\n        });\n      }\n\n    } catch (error) {\n      console.error('Error loading insights data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load insights data. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const populatePeriodData = async () => {\n    try {\n      const isRef = Array.isArray(modelData?.referenced_models) && (modelData!.referenced_models!.length > 0);\n      \n      if (isRef) {\n        // For reference models, populate child net sales based on period scope\n        await populateReferenceModelData();\n      } else {\n        // For regular models, populate net amount and invoice value based on period scope\n        await populateRegularModelData();\n      }\n    } catch (error) {\n      console.error('Error populating period data:', error);\n    }\n  };\n\n  const populateReferenceModelData = async () => {\n    try {\n      const months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n      const isMonth = months.includes(selectedPeriod);\n      const isHalf = !selectedPeriod.includes(' - Week ') && !isMonth;\n      \n      let targetPeriods: Array<{ period: string; week?: number }> = [];\n      \n      if (selectedPeriod.includes(' - Week ')) {\n        // Specific week: only that week\n        const { period, week } = parseWeekPeriod(selectedPeriod);\n        targetPeriods = [{ period, week }];\n      } else if (isHalf) {\n        // Half-month: both weeks of that half\n        targetPeriods = [\n          { period: selectedPeriod, week: 1 },\n          { period: selectedPeriod, week: 2 }\n        ];\n      } else if (isMonth) {\n        // Full month: all 4 weeks\n        const half1 = `${selectedPeriod} 1`;\n        const half2 = `${selectedPeriod} 2`;\n        targetPeriods = [\n          { period: half1, week: 1 },\n          { period: half1, week: 2 },\n          { period: half2, week: 1 },\n          { period: half2, week: 2 }\n        ];\n      }\n\n      // Fetch invoices for all target periods\n      const invoicePromises = targetPeriods.map(t => \n        apiService.listInvoices({ model_id: modelId, period: t.period, year, ...(t.week && { week: t.week }) })\n      );\n      const invoiceResults = await Promise.all(invoicePromises);\n      \n      // Sum up net amounts and invoice values across all periods\n      let totalNetAmount = 0;\n      let totalInvoiceValue = 0;\n      let hasPaidInvoice = false;\n      \n      // Initialize child net sales arrays\n      const childNetSales: number[] = new Array(modelData!.referenced_models!.length).fill(0);\n      \n      invoiceResults.forEach((result, idx) => {\n        if (result.status === 'Success' && Array.isArray(result.data)) {\n          const inv = result.data.find((i: any) => \n            i.model_id === modelId && \n            i.period === targetPeriods[idx].period && \n            i.year === year && \n            ((i.week || null) === (targetPeriods[idx].week || null))\n          );\n          \n          if (inv) {\n            totalNetAmount += Number(inv.net_amount || 0);\n            totalInvoiceValue += Number(inv.invoice_amount || 0);\n            if (inv.status === 'Paid') hasPaidInvoice = true;\n            \n            // Parse reference children nets from invoice notes\n            if (inv.notes) {\n              try {\n                const parsed = JSON.parse(inv.notes);\n                const children = Array.isArray(parsed?.reference_children) ? parsed.reference_children : [];\n                (modelData!.referenced_models || []).forEach((name, childIdx) => {\n                  const childId = (allModels.find((m: any) => (m.modelName || m.model_name) === name) || {}).model_id;\n                  const hit = children.find((c: any) => c.model_id === childId);\n                  childNetSales[childIdx] += Number(hit?.net_sales || 0);\n                });\n              } catch {}\n            }\n          }\n        }\n      });\n      \n      // Commented out work reports loading - manual input preferred for insights\n      // If no data from invoices, try to get from work reports\n      // if (childNetSales.length === 0 || childNetSales.every(n => n === 0)) {\n      //   const { period, week } = parseWeekPeriod(selectedPeriod);\n      //   const modelWorkReport = workReports.find((report: any) => \n      //     report.model_id === modelId && \n      //     report.period === period &&\n      //     ((report.week || null) === (week || null))\n      //   );\n      //   \n      //   if (modelWorkReport?.reference_children) {\n      //     try {\n      //       let referenceChildren = modelWorkReport.reference_children;\n      //       // Handle potential double-encoded JSON\n      //       if (typeof referenceChildren === 'string') {\n      //         referenceChildren = JSON.parse(referenceChildren);\n      //         if (typeof referenceChildren === 'string') {\n      //           referenceChildren = JSON.parse(referenceChildren);\n      //         }\n      //       }\n      //       \n      //       if (Array.isArray(referenceChildren)) {\n      //         (modelData!.referenced_models || []).forEach((name, childIdx) => {\n      //           const childId = (allModels.find((m: any) => (m.modelName || m.model_name) === name) || {}).model_id;\n      //           const hit = referenceChildren.find((c: any) => c.model_id === childId);\n      //           childNetSales[childIdx] = Number(hit?.net_sales || 0);\n      //         });\n      //         \n      //         // Recalculate totals from work reports\n      //         totalNetAmount = childNetSales.reduce((s, n) => s + (Number.isFinite(n) ? Number(n) : 0), 0);\n      //       }\n      //     } catch (error) {\n      //       console.error('Error parsing reference_children from work report:', error);\n      //     }\n      //   }\n      // }\n      \n      setNetAmount(totalNetAmount);\n      setInvoiceValue(totalInvoiceValue);\n      setInvoiceStatus(hasPaidInvoice ? 'Paid' : 'Unpaid');\n      setRefNetSales(childNetSales);\n      \n    } catch (error) {\n      console.error('Error populating reference model data:', error);\n    }\n  };\n\n  const populateRegularModelData = async () => {\n    try {\n      const months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n      const isMonth = months.includes(selectedPeriod);\n      const isHalf = !selectedPeriod.includes(' - Week ') && !isMonth;\n      \n      let targetPeriods: Array<{ period: string; week?: number }> = [];\n      \n      if (selectedPeriod.includes(' - Week ')) {\n        // Specific week: only that week\n        const { period, week } = parseWeekPeriod(selectedPeriod);\n        targetPeriods = [{ period, week }];\n      } else if (isHalf) {\n        // Half-month: both weeks of that half\n        targetPeriods = [\n          { period: selectedPeriod, week: 1 },\n          { period: selectedPeriod, week: 2 }\n        ];\n      } else if (isMonth) {\n        // Full month: all 4 weeks\n        const half1 = `${selectedPeriod} 1`;\n        const half2 = `${selectedPeriod} 2`;\n        targetPeriods = [\n          { period: half1, week: 1 },\n          { period: half1, week: 2 },\n          { period: half2, week: 1 },\n          { period: half2, week: 2 }\n        ];\n      }\n\n      // Fetch invoices for all target periods\n      const invoicePromises = targetPeriods.map(t => \n        apiService.listInvoices({ model_id: modelId, period: t.period, year, ...(t.week && { week: t.week }) })\n      );\n      const invoiceResults = await Promise.all(invoicePromises);\n      \n      // Sum up net amounts and invoice values across all periods\n      let totalNetAmount = 0;\n      let totalInvoiceValue = 0;\n      let hasPaidInvoice = false;\n      \n      invoiceResults.forEach((result, idx) => {\n        if (result.status === 'Success' && Array.isArray(result.data)) {\n          const inv = result.data.find((i: any) => \n            i.model_id === modelId && \n            i.period === targetPeriods[idx].period && \n            i.year === year && \n            ((i.week || null) === (targetPeriods[idx].week || null))\n          );\n          \n          if (inv) {\n            totalNetAmount += Number(inv.net_amount || 0);\n            totalInvoiceValue += Number(inv.invoice_amount || 0);\n            if (inv.status === 'Paid') hasPaidInvoice = true;\n          }\n        }\n      });\n      \n      setNetAmount(totalNetAmount);\n      setInvoiceValue(totalInvoiceValue);\n      setInvoiceStatus(hasPaidInvoice ? 'Paid' : 'Unpaid');\n      \n    } catch (error) {\n      console.error('Error populating regular model data:', error);\n    }\n  };\n\n  const handleNetAmountChange = async (value: number) => {\n    // Do not auto-calc on client; backend computes on Generate\n    setNetAmount(value);\n    // Defer persistence to Generate\n  };\n\n  const handleRefNetChange = (index: number, value: number) => {\n    const next = [...refNetSales];\n    next[index] = Math.max(0, Number(value) || 0);\n    setRefNetSales(next);\n    const total = next.reduce((s, n) => s + (Number.isFinite(n) ? Number(n) : 0), 0);\n    setNetAmount(total);\n  };\n\n  const generatePersistModel = async () => {\n    try {\n      setIsGenerating(true);\n      \n      // Calculate invoice amount without saving to database\n      console.log('Generate - Current netAmount:', netAmount);\n      const response = await apiService.calculateInvoice({\n        model_id: modelId,\n        net_amount: Math.max(0, Number(netAmount))\n      });\n      \n      if (response.status === 'Success' && response.data) {\n        // Update the UI with calculated values\n        const calculatedAmount = response.data.calculated_invoice_amount;\n        setInvoiceValue(calculatedAmount);\n        \n        toast({\n          title: \"Success\",\n          description: `Invoice calculated: $${calculatedAmount.toLocaleString()}`,\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: response.message || \"Failed to calculate invoice\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Error calculating invoice:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to calculate invoice. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const saveModelData = async () => {\n    try {\n      setIsSaving(true);\n      \n      const { period, week } = parseWeekPeriod(selectedPeriod);\n      \n      // Save invoice data to database\n      const list = await apiService.listInvoices({ model_id: modelId, period, year, ...(week && { week }) });\n      const existing = (list.data || []).find((i: any) => i.model_id === modelId && i.period === period && i.year === year && (i.week || null) === (week || null));\n      \n      const payload: any = {\n        net_amount: Math.max(0, Number(netAmount)),\n        invoice_amount: Number(invoiceValue || 0), // Use the current invoice value (could be calculated or manually edited)\n        status: invoiceStatus === 'Paid' ? 'Paid' : 'Unpaid',\n      };\n      \n      console.log('Save payload:', payload);\n      console.log('State values:', { netAmount, invoiceValue, invoiceStatus });\n      \n      // For reference models, include reference_children and notes\n      const isRef = Array.isArray(modelData?.referenced_models) && (modelData!.referenced_models!.length > 0);\n      if (isRef) {\n        const refChildren = (modelData!.referenced_models || []).map((name, idx) => {\n          const child = (allModels.find((m: any) => (m.modelName || m.model_name) === name) || {}) as any;\n          return {\n            model_id: child.model_id,\n            net_sales: Number(refNetSales[idx] || 0)\n          };\n        });\n        payload.reference_children = refChildren;\n        try { payload.notes = JSON.stringify({ reference_children: refChildren }); } catch {}\n      }\n      \n      if (existing) {\n        await apiService.updateInvoice(existing.invoice_id, payload, false); // Don't auto-calculate, use provided values\n      } else if (payload.net_amount > 0 || payload.invoice_amount > 0 || payload.status === 'Paid') {\n        await apiService.createInvoice({ model_id: modelId, period, year, ...(week && { week }), ...payload });\n      }\n      \n      // Save model insights data using the saved invoice values\n      await apiService.saveModelInsights({\n        model_id: modelId,\n        period,\n        year,\n        week,\n        net_sales: payload.net_amount,\n        invoice_value: payload.invoice_amount,\n        invoice_status: payload.status,\n        revenue: payload.invoice_amount,\n        profit: payload.invoice_amount - payload.net_amount\n      });\n      \n      toast({ title: 'Saved', description: 'Model data saved successfully for the selected period.' });\n    } catch (e) {\n      console.error('Save failed:', e);\n      toast({ title: 'Error', description: 'Save failed. Please try again.', variant: 'destructive' });\n    } finally {\n      // Reload latest values\n      await Promise.all([loadInsightsData(), loadWeeklySummary()]);\n      setIsSaving(false);\n    }\n  };\n\n  const loadWeeklySummary = async () => {\n    try {\n      setLoadingSummary(true);\n      const rows: WeeklySummaryRow[] = [];\n      // Build target (period, week) tuples based on selection\n      const targets: Array<{ period: string; week: number; label: string }> = [];\n      const label = selectedPeriod;\n      const months = [\n        'January','February','March','April','May','June','July','August','September','October','November','December'\n      ];\n      const isMonth = months.includes(label);\n      const isHalf = !label.includes(' - Week ') && !isMonth; // e.g., \"January 1\" or \"January 2\"\n      if (label.includes(' - Week ')) {\n        const { period, week } = parseWeekPeriod(label);\n        if (period && typeof week === 'number') {\n          targets.push({ period, week, label: `${period} • W${week}` });\n        }\n      } else if (isHalf) {\n        // Two weeks for half-month\n        targets.push({ period: label, week: 1, label: `${label} • W1` });\n        targets.push({ period: label, week: 2, label: `${label} • W2` });\n      } else if (isMonth) {\n        // Four rows: 2 weeks each half\n        const half1 = `${label} 1`;\n        const half2 = `${label} 2`;\n        targets.push({ period: half1, week: 1, label: `${half1} • W1` });\n        targets.push({ period: half1, week: 2, label: `${half1} • W2` });\n        targets.push({ period: half2, week: 1, label: `${half2} • W1` });\n        targets.push({ period: half2, week: 2, label: `${half2} • W2` });\n      }\n\n      // Fetch insights for each target\n      const promises = targets.map(t => apiService.getModelInsights(modelId, t.period, year, t.week));\n      const results = await Promise.all(promises);\n      results.forEach((res, idx) => {\n        const t = targets[idx];\n        if (res.status === 'Success' && res.data) {\n          rows.push({\n            label: t.label,\n            period: t.period,\n            week: t.week,\n            revenue: res.data.revenue || 0,\n            real_revenue: res.data.real_revenue || 0,\n            cost: res.data.cost || 0,\n            profit: res.data.profit || 0,\n            real_profit: res.data.real_profit || 0,\n          });\n        } else {\n          rows.push({\n            label: t.label,\n            period: t.period,\n            week: t.week,\n            revenue: 0,\n            real_revenue: 0,\n            cost: 0,\n            profit: 0,\n            real_profit: 0,\n          });\n        }\n      });\n      setWeeklySummary(rows);\n    } catch (e) {\n      console.error('Error loading weekly summary:', e);\n      setWeeklySummary([]);\n    } finally {\n      setLoadingSummary(false);\n    }\n  };\n\n  // Commented out work reports loading - manual input preferred for insights\n  // const loadWorkReports = async () => {\n  //   try {\n  //     const { period, week } = parseWeekPeriod(selectedPeriod);\n  //     // Load work reports for all chatters for this period/week\n  //     const chattersResponse = await apiService.getAllChatters();\n  //     if (chattersResponse.status === 'Success' && chattersResponse.data) {\n  //       const allWorkReports: any[] = [];\n  //       \n  //       // Load work reports for each chatter\n  //       for (const chatter of chattersResponse.data) {\n  //         try {\n  //           const reportResponse = await apiService.getChatterWeeklyReport(\n  //             chatter.chatter_id, \n  //             period, \n  //             year, \n  //             week || 1\n  //           );\n  //           if (reportResponse.status === 'Success' && reportResponse.data) {\n  //             // Aggregate daily reports for the week\n  //             const aggregatedReports = aggregateWeeklyReports(reportResponse.data);\n  //             allWorkReports.push(...aggregatedReports);\n  //           }\n  //         } catch (error) {\n  //           console.error(`Error loading work reports for chatter ${chatter.chatter_id}:`, error);\n  //         }\n  //       }\n  //       \n  //       setWorkReports(allWorkReports);\n  //     }\n  //   } catch (error) {\n  //     console.error('Error loading work reports:', error);\n  //   }\n  // };\n\n  // const aggregateWeeklyReports = (dailyReports: any[]) => {\n  //   // Group reports by model_id\n  //   const modelGroups: { [key: string]: any[] } = {};\n  //   \n  //   dailyReports.forEach(report => {\n  //     const modelId = report.model_id;\n  //     if (!modelGroups[modelId]) {\n  //       modelGroups[modelId] = [];\n  //     }\n  //     modelGroups[modelId].push(report);\n  //   });\n  //   \n  //   // Aggregate data for each model\n  //   const aggregatedReports: any[] = [];\n  //   \n  //   Object.keys(modelGroups).forEach(modelId => {\n  //     const reports = modelGroups[modelId];\n  //     if (reports.length === 0) return;\n  //     \n  //     // Sum up hours and net_sales\n  //     let totalHours = 0;\n  //     let totalNetSales = 0;\n  //     let aggregatedReferenceChildren: any[] = [];\n  //     \n  //     reports.forEach(report => {\n  //       totalHours += Number(report.hours || 0);\n  //       totalNetSales += Number(report.net_sales || 0);\n  //       \n  //       // Aggregate reference_children if present\n  //       if (report.reference_children) {\n  //         try {\n  //           let referenceChildren = report.reference_children;\n  //           // Handle potential double-encoded JSON\n  //           if (typeof referenceChildren === 'string') {\n  //             referenceChildren = JSON.parse(referenceChildren);\n  //             if (typeof referenceChildren === 'string') {\n  //               referenceChildren = JSON.parse(referenceChildren);\n  //             }\n  //           }\n  //           \n  //           if (Array.isArray(referenceChildren)) {\n  //             // If this is the first report, initialize aggregated children\n  //             if (aggregatedReferenceChildren.length === 0) {\n  //               aggregatedReferenceChildren = referenceChildren.map(child => ({\n  //                 model_id: child.model_id,\n  //                 hours: 0,\n  //                 net_sales: 0\n  //               }));\n  //             }\n  //             \n  //             // Add to aggregated children\n  //             referenceChildren.forEach((child, index) => {\n  //               if (aggregatedReferenceChildren[index]) {\n  //                 aggregatedReferenceChildren[index].hours += Number(child.hours || 0);\n  //                 aggregatedReferenceChildren[index].net_sales += Number(child.net_sales || 0);\n  //               }\n  //             });\n  //           }\n  //         } catch (error) {\n  //           console.error('Error aggregating reference_children:', error);\n  //         }\n  //       }\n  //     });\n  //     \n  //     // Create aggregated report\n  //     const aggregatedReport = {\n  //       ...reports[0], // Use first report as base\n  //       hours: totalHours,\n  //       net_sales: totalNetSales,\n  //       reference_children: aggregatedReferenceChildren.length > 0 ? aggregatedReferenceChildren : null\n  //     };\n  //     \n  //     aggregatedReports.push(aggregatedReport);\n  //   });\n  //   \n  //   return aggregatedReports;\n  // };\n\n  // Calculate dynamic Y-axis scaling\n  const getYAxisMax = () => {\n    if (!insightsData) return 4000;\n    \n    const maxValue = Math.max(\n      insightsData.revenue,\n      insightsData.cost,\n      insightsData.profit,\n      insightsData.real_revenue,\n      insightsData.real_profit\n    );\n    \n    // Dynamic scaling based on period type\n    let gridStep = 1000; // Default 1K\n    if (selectedPeriod.includes('Week')) {\n      gridStep = 1000; // 1K per grid line for weekly\n    } else if (selectedPeriod.includes('July 1') || selectedPeriod.includes('July 2') || \n               selectedPeriod.includes('August 1') || selectedPeriod.includes('August 2')) {\n      gridStep = 2000; // 2K per grid line for half-month\n    } else if (selectedPeriod === 'July' || selectedPeriod === 'August') {\n      gridStep = 4000; // 4K per grid line for full month\n    }\n    \n    return Math.ceil(maxValue / gridStep) * gridStep;\n  };\n\n  const yAxisMax = getYAxisMax();\n  const maxHeight = 180;\n\n  // Use backend cost breakdown when available for more accurate model cost/profit\n  const effectiveRevenue = insightsData?.revenue ?? 0;\n  const effectiveCost = (costBreakdown?.total_cost ?? insightsData?.cost ?? 0);\n  const effectiveProfit = effectiveRevenue - effectiveCost;\n  const effectiveProfitMargin = effectiveRevenue ? ((effectiveProfit / effectiveRevenue) * 100).toFixed(1) + '%' : '0%';\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/dashboard/insights\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Insights\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold\">{modelData?.model_name || 'Model'}</h1>\n            <p className=\"text-muted-foreground\">Performance Overview</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Overview Cards removed as per request */}\n\n      {/* Date Range Selector */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0\">\n            <div>\n              <CardTitle>Date Range Selection</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Select the period to view model performance\n              </p>\n            </div>\n            <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {availablePeriods.map((period) => (\n                  <SelectItem key={period} value={period}>\n                    {period}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Histogram */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Financial Overview</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Revenue, Cost, Profit, Real Revenue, and Real Profit breakdown for {selectedPeriod}\n          </p>\n        </CardHeader>\n        <CardContent>\n          <SinglePeriodHistogram \n            data={insightsData ? {\n              revenue: insightsData.revenue,\n              cost: insightsData.cost,\n              profit: insightsData.profit,\n              realRevenue: insightsData.real_revenue,\n              realProfit: insightsData.real_profit,\n            } : {\n              revenue: 0,\n              cost: 0,\n              profit: 0,\n              realRevenue: 0,\n              realProfit: 0,\n            }}\n            period={selectedPeriod}\n            loading={loading}\n            height={400}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Cost Breakdown */}\n      {costBreakdown && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Source of Cost</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Detailed breakdown of costs for this model\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"text-sm font-medium text-muted-foreground\">Chatter Salaries</div>\n                <div className=\"text-2xl font-bold\">${costBreakdown.chatter_cost.toLocaleString()}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Hourly + commissions\n                </div>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"text-sm font-medium text-muted-foreground\">Team Leaders</div>\n                <div className=\"text-2xl font-bold\">${costBreakdown.tl_cost.toLocaleString()}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Commission-based\n                </div>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"text-sm font-medium text-muted-foreground\">Managers</div>\n                <div className=\"text-2xl font-bold\">${costBreakdown.manager_cost.toLocaleString()}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Fixed + commission\n                </div>\n              </div>\n              {/* Assistants tile removed as requested */}\n            </div>\n            <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-lg font-bold text-blue-900\">\n                Total Cost: ${costBreakdown.total_cost.toLocaleString()}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Summary Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Summary for {selectedPeriod}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"font-medium\">Net Amount</span>\n                <div className=\"flex items-center space-x-2\">\n                  {Array.isArray(modelData?.referenced_models) && modelData!.referenced_models!.length > 0 ? (\n                    <div className=\"flex flex-col gap-1 items-end\">\n                      {modelData!.referenced_models!.map((name, idx) => (\n                        <div key={`${name}-${idx}`} className=\"flex items-center gap-2\">\n                          <span className=\"text-xs text-muted-foreground w-20 truncate\" title={name}>{name}</span>\n                          <span className=\"w-24 text-right font-medium\">\n                            ${Math.round(refNetSales[idx] || 0).toLocaleString()}\n                          </span>\n                        </div>\n                      ))}\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        Total: ${netAmount.toLocaleString()}\n                      </div>\n                    </div>\n                  ) : (\n                    <span className=\"w-32 text-right font-medium\">\n                      ${netAmount.toLocaleString()}\n                    </span>\n                  )}\n                  <span className=\"text-sm text-muted-foreground\">(from admin)</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"font-medium\">Invoice Value</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"w-32 text-right font-medium\">\n                    ${invoiceValue.toLocaleString()}\n                  </span>\n                  <span className=\"text-sm text-muted-foreground\">(auto)</span>\n                </div>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                <span className=\"font-medium\">Invoice Status</span>\n                <span className=\"w-32 text-right font-medium\">\n                  {invoiceStatus}\n                </span>\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Model Rules</h4>\n                <div className=\"text-sm space-y-1\">\n                  <div>Earnings Type: {modelData?.earnings_type || 'Not set'}</div>\n                  <div>Cut Logic: {modelData?.cut_logic ? 'Configured' : 'Not configured'}</div>\n                </div>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Performance Metrics</h4>\n                <div className=\"text-sm space-y-1\">\n                  <div>Revenue: ${effectiveRevenue.toLocaleString()}</div>\n                  <div>Cost: ${effectiveCost.toLocaleString()}</div>\n                  <div>Profit: ${effectiveProfit.toLocaleString()}</div>\n                  <div>Profit Margin: {effectiveProfitMargin}</div>\n                </div>\n              </div>\n              {/* Weekly Summary Table */}\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Weekly Summary</h4>\n                {loadingSummary ? (\n                  <div className=\"text-sm text-muted-foreground\">Loading…</div>\n                ) : weeklySummary.length === 0 ? (\n                  <div className=\"text-sm text-muted-foreground\">No data</div>\n                ) : (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Scope</TableHead>\n                        <TableHead className=\"text-right\">Revenue</TableHead>\n                        <TableHead className=\"text-right\">Cost</TableHead>\n                        <TableHead className=\"text-right\">Profit</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {weeklySummary.map((r) => (\n                        <TableRow key={`${r.period}-${r.week}`}>\n                          <TableCell className=\"font-medium\">{r.label}</TableCell>\n                          <TableCell className=\"text-right\">${r.revenue.toLocaleString()}</TableCell>\n                          <TableCell className=\"text-right\">${r.cost.toLocaleString()}</TableCell>\n                          <TableCell className=\"text-right\">${r.profit.toLocaleString()}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n    \n\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}