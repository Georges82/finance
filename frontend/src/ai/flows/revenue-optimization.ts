
'use server';

import {z} from 'genkit';

const RevenueOptimizationInputSchema = z.object({
  chatter: z.object({
    name: z.string().describe('The name of the chatter.'),
    totalChats: z.number().describe('The total number of chats the chatter handled.'),
    averageDuration: z.string().describe('The average duration of their chats (e.g., "12min").'),
    revenueGenerated: z.string().describe('The total revenue generated by the chatter (e.g., "$2,450.00").'),
    status: z.string().describe('The current status of the chatter (e.g., "Active").'),
  }),
  agencyBenchmarks: z.object({
      averageRevenuePerChatter: z.string().describe('The average revenue generated across all chatters in the agency.'),
      topPerformerStrategies: z.string().describe('A summary of successful strategies used by top-performing chatters.'),
  }),
  marketConditions: z.string().describe('A summary of current market conditions, including popular platforms and client preferences.'),
});
export type RevenueOptimizationInput = z.infer<typeof RevenueOptimizationInputSchema>;

const RevenueOptimizationOutputSchema = z.object({
    strengths: z.array(z.string()).describe("A list of the chatter's key strengths identified from their performance data."),
    weaknesses: z.array(z.string()).describe("A list of the chatter's key weaknesses or areas for improvement."),
    recommendations: z.array(z.object({
        action: z.string().describe("A specific, actionable recommendation for the chatter or their manager."),
        reasoning: z.string().describe("The reasoning behind why this action is recommended based on the provided data."),
        expectedImpact: z.string().describe("The expected positive impact of implementing this action (e.g., 'Increase revenue by 10-15%')."),
    })).describe("A list of actionable recommendations."),
});
export type RevenueOptimizationOutput = z.infer<typeof RevenueOptimizationOutputSchema>;

export async function revenueOptimization(input: RevenueOptimizationInput): Promise<RevenueOptimizationOutput> {
  const {ai} = await import('@/ai/genkit');
  return revenueOptimizationFlow(input, ai);
}

const revenueOptimizationPrompt = (ai: any) => ai.definePrompt({
  name: 'revenueOptimizationPrompt',
  input: {schema: RevenueOptimizationInputSchema},
  output: {schema: RevenueOptimizationOutputSchema},
  prompt: `You are an expert performance analyst for a chatting agency. Your task is to provide a detailed analysis and actionable recommendations for a chatter based on their performance data, agency benchmarks, and current market conditions.

  **Chatter Profile:**
  - Name: {{{chatter.name}}}
  - Status: {{{chatter.status}}}
  - Revenue Generated: {{{chatter.revenueGenerated}}}
  - Total Chats: {{{chatter.totalChats}}}
  - Average Chat Duration: {{{chatter.averageDuration}}}

  **Agency Benchmarks:**
  - Average Revenue Per Chatter: {{{agencyBenchmarks.averageRevenuePerChatter}}}
  - Top Performer Strategies: {{{agencyBenchmarks.topPerformerStrategies}}}

  **Market Conditions:**
  - {{{marketConditions}}}

  **Your Analysis Must Include:**
  1.  **Strengths:** Identify specific strengths. Is their revenue high? Is their chat duration indicative of deep conversations?
  2.  **Weaknesses:** Identify specific weaknesses. Is their revenue below the agency average? Are there signs of inefficiency?
  3.  **Recommendations:** Provide a list of at least 3 concrete, actionable recommendations. For each recommendation, provide:
      - A clear 'action' to be taken.
      - The 'reasoning' for this action, directly linking it to the data provided.
      - The 'expectedImpact' on their performance (e.g., revenue increase, improved client retention).

  Analyze all the provided data to generate your response. Be insightful and provide recommendations that are directly tied to the data and context.
`,
});

const revenueOptimizationFlow = (ai: any) => ai.defineFlow(
  {
    name: 'revenueOptimizationFlow',
    inputSchema: RevenueOptimizationInputSchema,
    outputSchema: RevenueOptimizationOutputSchema,
  },
  async (input: RevenueOptimizationInput) => {
    const {output} = await revenueOptimizationPrompt(ai)(input);
    return output!;
  }
);
